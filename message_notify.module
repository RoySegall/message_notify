<?php

/**
 * @file
 * Message notify.
 */
use Drupal\entity\Entity\EntityViewMode;
use Drupal\message\Entity\Message;
use Drupal\message_notify\MessageNotify;

/**
 * Implements hook_entity_view_mode_info_alter().
 *
 * Add a the notifiers view modes.
 */
function message_notify_entity_view_mode_info_alter(&$view_modes) {
  $notifiers = MessageNotify::GetNotifiers();

  foreach ($notifiers as $notifier) {
    $plugin_view_modes = $notifier['view_modes'];

    foreach ($plugin_view_modes as $type => $plugin_view_mode) {

      if (entity_load('view_mode', 'message.' . $type)) {
        // The view mode already created. Skipping.
        continue;
      }

      /** @var EntityViewMode $view_mode */
      $view_mode = entity_create('view_mode');
      $view_mode->targetEntityType = 'message';
      $view_mode->label = $plugin_view_mode->render();
      $view_mode->setStatus(TRUE);
      $view_mode->id = 'message.' . $type;
      $view_mode->save();
    }
  }
}

/**
 * Implements hook_mail().
 *
 * Set's the message subject and body as configured.
 */
function message_notify_mail($key, &$message, $params) {
  // Send the email.
  $message['subject'] = $params['email_subject'];
  $message['body'][] = $params['email_body'];
}

/**
 * Send the message.
 *
 * @param Message $message
 *  The message object.
 * @param String $notifier
 *  The notifier ID. Default to Email.
 * @param Array $options
 *  Additional options that will be passed to the notifier plugin.
 */
function message_notify_send_message(Message $message, $notifier = 'Email', $options = array()) {
  $options = $options + array('message' => $message);
  MessageNotify::GetNotifier('Email', $options)
    ->setMessage($message)
    ->send();
}
